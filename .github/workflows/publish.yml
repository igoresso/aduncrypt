name: Build and Publish to GHCR

on:
  push:
    branches: [master]
    paths-ignore:
      - "LICENSE"
      - "README.md"
      - "*.md"
      - ".gitignore"
      - ".github/workflows/update-version.yml" # Don't trigger on workflow updates
  pull_request:
    branches: [master]
    paths-ignore:
      - "LICENSE"
      - "README.md"
      - "*.md"
      - ".gitignore"
      - ".github/workflows/update-version.yml"
  workflow_dispatch:
    inputs:
      platforms:
        description: "Platforms to build for"
        required: false
        default: "linux/amd64,linux/arm64,linux/arm/v7"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write
  security-events: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract AGH version from Containerfile
        id: extract-version
        run: |
          VERSION=$(grep -oP '(?<=AGH_VER=)\S+' Containerfile)
          echo "Extracted AGH version: $VERSION"
          echo "AGH_VERSION=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.extract-version.outputs.AGH_VERSION }},enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
          labels: |
            org.opencontainers.image.title=AdUnCrypt
            org.opencontainers.image.description=Privacy-focused DNS stack with AdGuard Home, Unbound, and DNSCrypt-proxy
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.licenses=MIT

      - name: Build for testing
        id: build-test
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Containerfile
          platforms: linux/amd64
          load: true
          tags: test-image:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Security scan & functionality test
        timeout-minutes: 10
        run: |
          IMAGE_REF="test-image:latest"

          echo "üîç Running vulnerability scan..."
          # Mount current directory to access the SARIF file from host
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v ${{ github.workspace }}:/workspace \
            aquasec/trivy:latest image --format sarif --output /workspace/trivy-results.sarif $IMAGE_REF || true

          echo "üß™ Testing DNS resolution chain..."
          if ! docker run --rm --name aduncrypt-test -d --platform linux/amd64 test-image:latest; then
            echo "‚ùå Failed to start container"
            exit 1
          fi

          echo "‚è≥ Waiting for services to start..."
          sleep 10

          echo "üîç Checking service processes..."
          if docker exec aduncrypt-test pgrep unbound > /dev/null 2>&1; then
            echo "‚úÖ Unbound process running"
          else
            echo "‚ùå Unbound not running" && exit 1
          fi

          if docker exec aduncrypt-test pgrep dnscrypt-proxy > /dev/null 2>&1; then
            echo "‚úÖ DNSCrypt-proxy process running"
          else
            echo "‚ùå DNSCrypt-proxy not running" && exit 1
          fi

          if docker exec aduncrypt-test pgrep AdGuardHome > /dev/null 2>&1; then
            echo "‚úÖ AdGuard Home process running"
          else
            echo "‚ùå AdGuard Home not running" && exit 1
          fi

          echo "üîç Testing AdGuard Home web interface..."
          for i in {1..5}; do
            if docker exec aduncrypt-test wget -q --spider --timeout=10 http://127.0.0.1:3000 > /dev/null 2>&1; then
              echo "‚úÖ AdGuard Home web interface accessible"
              break
            fi
            echo "‚è≥ Attempt $i/5: Waiting for AdGuard Home web interface..."
            sleep 5
            if [ $i -eq 5 ]; then
              echo "‚ùå AdGuard Home web interface not accessible after 25 seconds"
              exit 1
            fi
          done

          echo "üåê Testing DNS resolution chain..."

          # Test DNSCrypt-proxy
          DNSCRYPT_RESULT=$(docker exec aduncrypt-test dig @127.0.0.1 -p 5353 google.com +short | head -1)
          if [ -n "$DNSCRYPT_RESULT" ]; then
            echo "‚úÖ DNSCrypt-proxy (port 5353) responding ‚Üí $DNSCRYPT_RESULT"
          else
            echo "‚ùå DNSCrypt-proxy not responding" && exit 1
          fi

          # Test Unbound
          UNBOUND_RESULT=$(docker exec aduncrypt-test dig @127.0.0.1 -p 5053 google.com +short | head -1)
          if [ -n "$UNBOUND_RESULT" ]; then
            echo "‚úÖ Unbound (port 5053) responding ‚Üí $UNBOUND_RESULT"
          else
            echo "‚ùå Unbound not responding" && exit 1
          fi

          # Test DNSSEC validation
          echo "üîí Testing DNSSEC validation..."
          if docker exec aduncrypt-test dig @127.0.0.1 -p 5053 dnssec-failed.org +dnssec | grep -q "SERVFAIL"; then
            echo "‚úÖ DNSSEC validation working (correctly rejecting invalid signatures)"
          else
            echo "‚ùå DNSSEC validation not working" && exit 1
          fi

          # Cleanup
          docker stop aduncrypt-test
          echo "üéâ All tests passed! DNS privacy stack is working correctly."

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push multi-arch
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Containerfile
          platforms: ${{ github.event.inputs.platforms || 'linux/amd64,linux/arm64,linux/arm/v7' }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: Upload security scan results
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif
        continue-on-error: true

      - name: Verify published image
        if: github.event_name != 'pull_request'
        run: |
          echo "üöÄ Image published successfully!"
          echo "üì¶ Tags: ${{ steps.meta.outputs.tags }}"
          echo "üè∑Ô∏è AGH Version: ${{ steps.extract-version.outputs.AGH_VERSION }}"
          echo "üîó Registry: https://github.com/${{ github.repository_owner }}/pkgs/container/${{ github.event.repository.name }}"

      - name: Clean up old container versions
        if: github.event_name != 'pull_request'
        uses: actions/delete-package-versions@v5
        with:
          package-name: "aduncrypt"
          package-type: "container"
          min-versions-to-keep: 10
          delete-only-untagged-versions: true
