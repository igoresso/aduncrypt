name: Build and Publish to GHCR

on:
  push:
    branches: [master]
    paths-ignore:
      - "LICENSE"
      - "README.md"
      - "*.md"
      - ".gitignore"
      - ".github/workflows/update-version.yml"
  pull_request:
    branches: [master]
    paths-ignore:
      - "LICENSE"
      - "README.md"
      - "*.md"
      - ".gitignore"
      - ".github/workflows/update-version.yml"
  workflow_dispatch:
    inputs:
      platforms:
        description: "Platforms to build for"
        required: false
        default: "linux/amd64,linux/arm64,linux/arm/v7"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write
  security-events: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract AGH version from Containerfile
        id: extract-version
        run: |
          VERSION=$(grep -oP '(?<=AGH_VER=)\S+' Containerfile)
          echo "Extracted AGH version: $VERSION"
          echo "AGH_VERSION=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.extract-version.outputs.AGH_VERSION }},enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
          labels: |
            org.opencontainers.image.title=AdUnCrypt
            org.opencontainers.image.description=Privacy-focused DNS stack with AdGuard Home, Unbound, and DNSCrypt-proxy
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.licenses=MIT

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Containerfile
          platforms: ${{ github.event.inputs.platforms || 'linux/amd64,linux/arm64,linux/arm/v7' }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.extract-version.outputs.AGH_VERSION }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: |
            index:org.opencontainers.image.description=Privacy-focused DNS stack with AdGuard Home, Unbound, and DNSCrypt-proxy
            index:org.opencontainers.image.source=https://github.com/${{ github.repository }}
            index:org.opencontainers.image.documentation=https://github.com/${{ github.repository }}/blob/master/README.md
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: Security scan & functionality test
        if: github.event_name != 'pull_request'
        timeout-minutes: 10
        run: |
          IMAGE_REF="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"

          echo "🔍 Running vulnerability scan..."
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v ${{ github.workspace }}:/workspace \
            aquasec/trivy:latest image --format sarif --output /workspace/trivy-results.sarif $IMAGE_REF || true

          echo "🧪 Testing DNS resolution chain..."
          docker run --rm --name aduncrypt-test -d --privileged --platform linux/amd64 $IMAGE_REF

          echo "⏳ Waiting for services to start..."
          sleep 15  # Increased wait time

          # Check if container is still running
          if ! docker ps | grep -q aduncrypt-test; then
            echo "❌ Container exited unexpectedly"
            echo "📋 Container logs:"
            docker logs aduncrypt-test 2>&1 || true
            exit 1
          fi

          echo "🔍 Checking service processes..."
          if docker exec aduncrypt-test pgrep unbound > /dev/null 2>&1; then
            echo "✅ Unbound process running"
          else
            echo "❌ Unbound not running"
            echo "📋 Container logs:"
            docker logs aduncrypt-test 2>&1 || true
            docker stop aduncrypt-test 2>/dev/null || true
            exit 1
          fi

          if docker exec aduncrypt-test pgrep dnscrypt-proxy > /dev/null 2>&1; then
            echo "✅ DNSCrypt-proxy process running"
          else
            echo "❌ DNSCrypt-proxy not running"
            echo "📋 Container logs:"
            docker logs aduncrypt-test 2>&1 || true
            docker stop aduncrypt-test 2>/dev/null || true
            exit 1
          fi

          if docker exec aduncrypt-test pgrep AdGuardHome > /dev/null 2>&1; then
            echo "✅ AdGuard Home process running"
          else
            echo "❌ AdGuard Home not running"
            echo "📋 Container logs:"
            docker logs aduncrypt-test 2>&1 || true
            docker stop aduncrypt-test 2>/dev/null || true
            exit 1
          fi

          echo "🔍 Testing AdGuard Home web interface..."
          for i in {1..6}; do
            if docker exec aduncrypt-test wget -q --spider --timeout=10 http://127.0.0.1:3000 > /dev/null 2>&1; then
              echo "✅ AdGuard Home web interface accessible"
              break
            fi
            echo "⏳ Attempt $i/6: Waiting for AdGuard Home web interface..."
            sleep 5
            if [ $i -eq 6 ]; then
              echo "❌ AdGuard Home web interface not accessible after 30 seconds"
              echo "📋 Container logs:"
              docker logs aduncrypt-test 2>&1 || true
              docker stop aduncrypt-test 2>/dev/null || true
              exit 1
            fi
          done

          # Test DNS resolution chain (bottom-up)
          echo "🌐 Testing DNS resolution chain..."

          # Test DNSCrypt-proxy directly (encrypted upstream)
          DNSCRYPT_RESULT=$(docker exec aduncrypt-test dig @127.0.0.1 -p 5353 google.com +short +time=5 | head -1)
          if [ -n "$DNSCRYPT_RESULT" ]; then
            echo "✅ DNSCrypt-proxy (port 5353) responding → $DNSCRYPT_RESULT"
          else
            echo "❌ DNSCrypt-proxy not responding"
            docker logs aduncrypt-test 2>&1 || true
            docker stop aduncrypt-test 2>/dev/null || true
            exit 1
          fi

          # Test Unbound (caching recursive resolver)
          UNBOUND_RESULT=$(docker exec aduncrypt-test dig @127.0.0.1 -p 5053 google.com +short +time=5 | head -1)
          if [ -n "$UNBOUND_RESULT" ]; then
            echo "✅ Unbound (port 5053) responding → $UNBOUND_RESULT"
          else
            echo "❌ Unbound not responding"
            docker logs aduncrypt-test 2>&1 || true
            docker stop aduncrypt-test 2>/dev/null || true
            exit 1
          fi

          # Test DNSSEC validation
          echo "🔒 Testing DNSSEC validation..."
          if docker exec aduncrypt-test dig @127.0.0.1 -p 5053 dnssec-failed.org +dnssec +time=10 | grep -q "SERVFAIL"; then
            echo "✅ DNSSEC validation working (correctly rejecting invalid signatures)"
          else
            echo "⚠️ DNSSEC validation test inconclusive (not necessarily an error)"
          fi

          # Cleanup
          docker stop aduncrypt-test 2>/dev/null || true
          echo "🎉 All tests passed! DNS privacy stack is working correctly."

      - name: Upload security scan results
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif
        continue-on-error: true

      - name: Verify published image
        if: github.event_name != 'pull_request'
        run: |
          echo "🚀 Image published successfully!"
          echo "📦 Tags: ${{ steps.meta.outputs.tags }}"
          echo "🏷️ AGH Version: ${{ steps.extract-version.outputs.AGH_VERSION }}"
          echo "🔗 Registry: https://github.com/${{ github.repository_owner }}/pkgs/container/${{ github.event.repository.name }}"

      - name: Clean up old container versions
        if: github.event_name != 'pull_request'
        uses: actions/delete-package-versions@v5
        with:
          package-name: "aduncrypt"
          package-type: "container"
          min-versions-to-keep: 10
          delete-only-untagged-versions: true
